=head1 GUIDeFATE::JustWin32

=head3 Description

The Original GUIDeFATE was meant to be a "Quick and Dirty",  platform agmostic GUI bulder taking advantage of whatever back end was available on the system.  As a tool that served many potential libraries, installation was frequently difficult, and some of the dependencies were themselves difficult to install.  This uses a subset of GUIDeFATE to be an easy to install utility to help GUI app.

=head3 Synopsis

  #!perl
  use strict; use warnings;
  use GUIDeFATE::JustWin32;    # the replacenment for use GUIDeFATE
  my $window=<<END;            # this statement deliers the textual represesentation of the application
  +-----------------+
  |T My 1st GUI     |
  +-----------------+
  |  Hello World! ! |
  |                 |
  +-----------------+

  END

  my $gui=GUIDeFATE::JustWin32->new($window,"q");  # geerates the UI
  my $frame=$gui->getFrame||$gui;                  # gets the UI object for future manipulation
  $gui->MainLoop;                                  # starts the UI main loop. 


=head3 Operation

Typically the UI is designed on a text-editor using monospace fonts, using + - and | characters
and passed to the constructor as a string (C<$window> in the example below) along with an "assistance" string, thus:-

   my $gui=GUIDeFATE::JustWin32->new($window,"q");

The assistance string can be one of:

=over 4

=item "q"

for "quiet"; no outputs to the console

=item "v"

for "verbose"; a description of the widgets identified and their IDs for future manipulation/enquiry

=item "a"

for "autogenerate"; generate a helper file containing the perl code for all the callbacks that you may need and ids of the UI Widgets

=back

Different backends work differently; the constructor can return the GUI object, or require a separate function to get this object. For consistency and to ease portability into other backends the GUI object containg the "frame" is invoked thus:-

  my $frame=$gui->getFrame||$gui;                  # gets the UI object for future manipulation

The UI then is connnected to the event loop using 

  $gui->MainLoop;                                  # startsthe UI main loop. 


=head3 Widgets

Every widget has an ID which is of the format <widget type><index in the internal widget list>.  The index may not be sequential as often the widgets are made of more than one widget in some backends, so an effort is made to keep the numbering consistent across platforms.  Any change of the window design will often lead to complete renumbering of the widget ID. Sorry.

=over 4

=item Static Text

Created when text detected.  widgets have ids in the form "stattext<id>", and can be accessed programmatically using $frame->{stattext<id>}. The content can be changed using setlabel as 

    $frame->setLabel("stattext1", "The label has changed");


=item Single line Text Control

=item Multiline Text Control

=item Combo Boxes

=item Buttons

=item Checkboxes

=item Menu

=item Dialog Boxes

=item File Selectors

=back
